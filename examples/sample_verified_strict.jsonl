{"number": 43, "title": "Mode FM under Band CB not selectable", "created_at": "2025-04-09T06:29:21Z", "closed_at": "2025-04-09T07:14:15Z", "commit_id": "392ce79c18f2cccdb2f9c24985557a47efe2bb5f", "labels": [], "url": "https://github.com/esp32-si4732/ats-mini/issues/43", "body": "Hello,\n\nI got another issue.\n\nUnder Band CB I'm not able to select Mode FM on my device.\n\nI'd installed V1.09 with rotated display.", "comments_url": "https://api.github.com/repos/esp32-si4732/ats-mini/issues/43/comments", "author": "BrightCGN", "comments": [{"user": "jimjackii", "created_at": "2025-04-09T07:01:42Z", "body": "That is correct. The SI4732 is not capable of FM in the CB band.\n\nRegards, Steffen"}, {"user": "BrightCGN", "created_at": "2025-04-09T07:06:09Z", "body": "> That is correct. The SI4732 is not capable of FM in the CB band.\n> \n> Regards, Steffen\n\nThanks for the infos :-)"}], "satisfaction_conditions": ["A clear explanation of whether the feature is possible or not", "Technical reasoning for why a feature limitation exists"], "_classification": {"category": "Does not need build environment", "timestamp": "2025-04-14 01:00:51"}, "dockerfile": null, "language": "c++"}
{"number": 8, "title": "Unable to install zipfs extension. Getting \"Failed to download extension zipfs \" : Duckdb version 1.1.0", "created_at": "2025-02-04T07:04:47Z", "closed_at": "2025-02-04T13:31:03Z", "commit_id": "1998be89bf7f2a464161121661f016e0c8fe1302", "labels": [], "url": "https://github.com/isaacbrodsky/duckdb-zipfs/issues/8", "body": "Hi, I am unable to execute the following zipfs install command on Duckdb 1.1.0\n```sql\nINSTALL zipfs FROM community\n```\nI tried forcefully enabling the community extensions by executing following statement.\n```sql\nSET allow_community_extensions = true;\n```\nBut still, I am getting the following error message.\n\n```\nHTTP Error: Failed to download extension \"zipfs\" at URL \"http:// community-extensions. duckdb. org/ v1.1.0/ osx_arm64/ zipfs. duckdb_extension. gz\" (HTTP 403)  Candidate extensions: \"httpfs\", \"tpcds\", \"https\", \"postgres\", \"icu\"\n```", "comments_url": "https://api.github.com/repos/isaacbrodsky/duckdb-zipfs/issues/8/comments", "author": "aby-kuruvilla-clear", "comments": [{"user": "isaacbrodsky", "created_at": "2025-02-04T07:11:03Z", "body": "Hi, this extension was developed quite recently and only supports recent versions of DuckDB (1.1.3 or the forthcoming 1.2.0) If you update your DuckDB version I expect it will find a compatible build to install."}, {"user": "aby-kuruvilla-clear", "created_at": "2025-02-04T13:28:32Z", "body": "Thank you so much for the response."}], "satisfaction_conditions": ["Information about version compatibility requirements for the zipfs extension", "A clear explanation for why the installation command was failing", "A solution path to resolve the extension installation problem"], "_classification": {"category": "Does not need build environment", "timestamp": "2025-04-14 01:01:56"}, "dockerfile": null, "language": "c++"}
{"number": 247, "title": "LFO (without sync) changes speed based on song tempo", "created_at": "2025-02-13T13:10:16Z", "closed_at": "2025-02-13T13:38:07Z", "commit_id": "fa45ec23037802a2e9254101f6d9c706f26e775b", "labels": [], "url": "https://github.com/baconpaul/six-sines/issues/247", "body": "DAW tempo controls or offsets LFO RATE even with SYNC OFF. That can't be right. \n", "comments_url": "https://api.github.com/repos/baconpaul/six-sines/issues/247/comments", "author": "Taronium", "comments": [{"user": "baconpaul", "created_at": "2025-02-13T13:24:39Z", "body": "Oh no really? "}, {"user": "Taronium", "created_at": "2025-02-13T13:28:33Z", "body": "Yes, haha. Really!\nKind of a little shocker, because I love playing with LFO as oscillator. With Key Tracking to 25% it tracks perfectly. But then... Bamm! "}, {"user": "baconpaul", "created_at": "2025-02-13T13:31:17Z", "body": "That s embarrassing but i have fixed it in #248\n\ngood catch and wow very sorry about that"}, {"user": "Taronium", "created_at": "2025-02-13T13:40:07Z", "body": "Awesome, Paul, no worries! You're doing a bang up job! üòéüëç"}, {"user": "baconpaul", "created_at": "2025-02-13T14:10:17Z", "body": "I tested tempo sync extensively when I added it\nJust not in the off position \nlol "}], "satisfaction_conditions": ["Fix for LFO rate being affected by DAW tempo when sync is off", "Maintaining LFO's ability to function as an oscillator with key tracking", "Prompt acknowledgment and resolution of the issue"], "_classification": {"category": "Does not need build environment", "timestamp": "2025-04-14 01:01:15"}, "dockerfile": null, "language": "c++"}
{"number": 22, "title": "Does it support the GCC compiler with a custom instruction set?", "created_at": "2025-03-15T03:42:19Z", "closed_at": "2025-03-25T06:17:28Z", "commit_id": "14f74db85eb3694f6617f569a2e0e4530fcb451b", "labels": ["question"], "url": "https://github.com/lynx-family/primjs/issues/22", "body": "We are an embedded development team from China. Our devices use self-developed SoCs. Can it support custom instruction sets?", "comments_url": "https://api.github.com/repos/lynx-family/primjs/issues/22/comments", "author": "chenzd123456", "comments": [{"user": "viekai", "created_at": "2025-03-17T07:15:01Z", "body": "Since the core code of our template interpreter is in the .S file, which is generated by an internal assembler, it might be difficult to achieve this until we open-source our assembler. However, you can turn off the template interpreter and use the C interpreter version."}, {"user": "chenzd123456", "created_at": "2025-03-25T06:17:08Z", "body": "THX. I will try it."}], "satisfaction_conditions": ["A viable workaround for using the system with a custom instruction set", "Clear explanation of the technical limitations preventing direct support", "A practical solution that can be implemented by the embedded development team"], "_classification": {"category": "Does not need build environment", "timestamp": "2025-04-14 01:00:59"}, "dockerfile": null, "language": "c++"}
{"number": 479, "title": "Is there a way to force handoffs?", "created_at": "2025-04-11T01:13:36Z", "closed_at": "2025-04-11T02:49:10Z", "commit_id": "68c725f9425ab371e8774e50319e18da61ef2e80", "labels": ["question"], "url": "https://github.com/openai/openai-agents-python/issues/479", "body": "### Question\nIs there a way to force handoffs to other agents similar to how we can do it for tools by making model_setting `tool_choice` to `\"required\"`? Is the only current way to do this essentially to make the agent a tool and `tool_choice` to `\"required\"`?", "comments_url": "https://api.github.com/repos/openai/openai-agents-python/issues/479/comments", "author": "dylee9", "comments": [{"user": "rohan-mehta", "created_at": "2025-04-11T02:47:09Z", "body": "Set tool choice to the name of the handoff tool (which you can get from `Handoff.default_tool_name()` or `handoff.tool_name`)"}, {"user": "dylee9", "created_at": "2025-04-11T02:49:10Z", "body": "Perfect!"}], "satisfaction_conditions": ["A specific method to force agent handoffs similar to how tool usage can be forced", "A direct, concise approach that doesn't require converting agents to tools", "Information about specific parameter settings or configuration options to control handoff behavior"], "_classification": {"category": "Does not need build environment", "timestamp": "2025-04-14 00:59:37"}, "dockerfile": null, "language": "python"}
