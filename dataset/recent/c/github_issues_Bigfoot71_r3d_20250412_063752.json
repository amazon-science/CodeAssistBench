[
  {
    "number": 4,
    "title": "Embedded shaders",
    "created_at": "2025-02-27T19:21:06Z",
    "closed_at": "2025-02-28T14:58:58Z",
    "commit_id": "6d5d96b804c9b8ec19f69a9a7d908b4d2cc77113",
    "labels": [],
    "url": "https://github.com/Bigfoot71/r3d/issues/4",
    "body": "When trying to run either examples or own projects linking to the library it woudl seem that the default shaders were not embedded properly as it fails to load them in all cases resulting in a black window. Here is an example of the output from the basic example with it being the same for my own built.\n\n```\nINFO: SHADER: [ID 4] Vertex shader compiled successfully\nINFO: SHADER: [ID 5] Fragment shader compiled successfully\nWARNING: SHADER: [ID 6] Failed to link shader program\nWARNING: SHADER: [ID 6] Link error: ERROR: Linking vertex stage: Missing entry point: Each stage requires one entry point\nERROR: Linking fragment stage: Missing entry point: Each stage requires one entry point\n\nWARNING: SHADER: Failed to load custom shader code, using default shader\nINFO: SHADER: [ID 4] Vertex shader compiled successfully\nINFO: SHADER: [ID 5] Fragment shader compiled successfully\nWARNING: SHADER: [ID 6] Failed to link shader program\nWARNING: SHADER: [ID 6] Link error: ERROR: Linking vertex stage: Missing entry point: Each stage requires one entry point\nERROR: Linking fragment stage: Missing entry point: Each stage requires one entry point\n\nWARNING: SHADER: Failed to load custom shader code, using default shader\n```\n\nBuilding on windows using cmake and Mingw. Only special flags for cmake differing from the build instrcutions are `-G \"MinGW Makefiles\" -DPYTHON_EXECUTABLE=python`. As it would seem that when building it was looking for python3 while I do indeed have python 3.12 the naming was different.",
    "comments_url": "https://api.github.com/repos/Bigfoot71/r3d/issues/4/comments",
    "author": "R2Sam",
    "comments": [
      {
        "user": "Bigfoot71",
        "created_at": "2025-02-27T22:23:00Z",
        "body": "~Can you directly copy/paste the generated file or tell me what’s inside?\nIt should be located in your build directory at `generated/src/embedded/r3d_shaders.c`\nIf there was an error with Python, it should be present in the strings instead of the minified GLSL code~\n\n**EDIT**: I just tried with the same command as you: `-G \"MinGW Makefiles\" -DPYTHON_EXECUTABLE=python`\n\nThe issue seems to come from `-DPYTHON_EXECUTABLE=python`\n\nEven though `python` appears to be an alias for `python3` on my system, for some reason, this prevents the generation, no errors, nothing...\n\nIn any case, you shouldn’t need to specify python in cmake.\nIt should be found automatically if it’s in your `PATH` variable:  \n```cmake\nfind_program(PYTHON_EXECUTABLE python3 REQUIRED)\n```\n\nUnless you have a particular setup with your installation?\n\nLet me know if removing `-DPYTHON_EXECUTABLE=python` solves the issue\n\nAnd just to be sure, check the generated file in your cmake build directory:  `generated/src/embedded/r3d_shaders.c`  \n\nMake sure you’re getting the same result as me, empty strings..."
      },
      {
        "user": "R2Sam",
        "created_at": "2025-02-28T14:59:13Z",
        "body": "Perfect that was it thanks"
      }
    ],
    "satisfaction_conditions": [
      "Identification of the root cause preventing shader embedding",
      "A working configuration for building the library with proper shader embedding",
      "Clear guidance on CMake configuration for the library"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-14 00:59:51"
    },
    "dockerfile": "FROM ubuntu:22.04\n\n# Set environment variables to avoid interactive prompts during installation\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    git \\\n    python3 \\\n    python3-pip \\\n    libgl1-mesa-dev \\\n    libx11-dev \\\n    libxcursor-dev \\\n    libxinerama-dev \\\n    libxrandr-dev \\\n    libxi-dev \\\n    libxext-dev \\\n    libasound2-dev \\\n    mesa-common-dev \\\n    xorg-dev \\\n    libglu1-mesa-dev \\\n    wget \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install newer CMake version (3.25+)\nRUN wget -qO- \"https://cmake.org/files/v3.25/cmake-3.25.0-linux-x86_64.tar.gz\" | \\\n    tar --strip-components=1 -xz -C /usr/local\n\n# Create a working directory\nWORKDIR /app\n\n# Clone the repository and checkout the specific commit\nRUN git clone https://github.com/Bigfoot71/r3d.git . && \\\n    git checkout 6d5d96b804c9b8ec19f69a9a7d908b4d2cc77113 && \\\n    git submodule update --init --recursive\n\n# Make sure the Python scripts are executable\nRUN chmod +x scripts/bin2c.py scripts/glsl_minifier.py\n\n# Fix the shader embedding issue by ensuring the build process can find the embedded shaders\nRUN mkdir -p build && \\\n    cd build && \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python3) && \\\n    cd ../embedded/shaders && \\\n    python3 ../../scripts/glsl_minifier.py . && \\\n    cd ../../build && \\\n    cmake --build . -j$(nproc) || echo \"Build completed with some warnings\"\n\n# Set the working directory back to the project root\nWORKDIR /app\n\n# The container is now ready with the r3d library built\nCMD [\"/bin/bash\"]"
  }
]