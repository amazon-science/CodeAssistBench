[
  {
    "number": 522,
    "title": "Set pdf pages range to ask",
    "created_at": "2025-03-17T23:08:16Z",
    "closed_at": "2025-03-24T08:04:37Z",
    "labels": [
      "type: feature request",
      "type: question",
      "priority: p3"
    ],
    "url": "https://github.com/googleapis/python-genai/issues/522",
    "body": "Is there a way to ask a pdf only for 1 page o range of pages ? \n\nRight now:\n\n```python\nfrom pathlib import Path\n\nfrom google import genai\nimport os\n\n\nGEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\")\nclient = genai.Client(api_key=GEMINI_API_KEY)\n\npdf_file = Path(\"my-local-file.pdf\")\nsample_file = client.files.upload(file=pdf_file)\nprompt = f\"Ask this question only foy 1 page: YOUR QUESTION\"\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[sample_file, prompt])\nprint(response.text)\n```\n\nbut If my pdf has 2000 pages, I spend too much tokens. Exist a way to set the page or range of pages to ask ? \n\n\nsomething like: \n\n```python\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[sample_file, prompt]\n    pdf_pages = (1,1)\n\n)\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/googleapis/python-genai/issues/522/comments",
    "author": "lexiconlp",
    "comments": [
      {
        "user": "wanlin31",
        "created_at": "2025-03-20T18:32:25Z",
        "body": "Unfortunately, only look at a particular page or page range is not supported. Can you try to create a new file that only contain the desirable portion of the original file? "
      },
      {
        "user": "MarkDaoust",
        "created_at": "2025-03-21T01:02:47Z",
        "body": "> Can you try to create a new file that only contain the desirable portion of the original file?\n\nSeems like something that could be pretty easy using pypdf. Something like this seems to work:\n\n```\nfrom pypdf import PdfReader, PdfWriter\n\ndef create_new_pdf_from_range(input_pdf_path, output_pdf_path, start_page, end_page):\n    \"\"\"\n    Creates a new PDF from a range of pages in an existing PDF.\n\n    Args:\n        input_pdf_path: Path to the input PDF file.\n        output_pdf_path: Path to the output PDF file.\n        start_page: The starting page number (inclusive, 0-indexed).\n        end_page: The ending page number (exclusive, 0-indexed).\n    \"\"\"\n    reader = PdfReader(input_pdf_path)\n    writer = PdfWriter()\n\n    for page_num in range(start_page, end_page):\n        page = reader.pages[page_num]\n        writer.add_page(page)\n\n    with open(output_pdf_path, \"wb\") as output_pdf:\n        writer.write(output_pdf)\n\n# Example usage:\ninput_pdf = \"test.pdf\"  # Replace with your input PDF file path\noutput_pdf = \"output.pdf\" # Replace with your desired output PDF file path\nstart_page_index = 2     # Start page index (0 for the first page)\nend_page_index = 3       # End page index (exclusive, so this will be up to page 2)\n\ncreate_new_pdf_from_range(input_pdf, output_pdf, start_page_index, end_page_index)\n```\n\nNote that `client.files.upload` can take an open file object as input, so you can skip even writing it to disk\n\n@lexiconlp Does that solve your problem?"
      },
      {
        "user": "lexiconlp",
        "created_at": "2025-03-24T08:04:37Z",
        "body": "I'd thought about doing that too @MarkDaoust , but I thought there was an option.\n\nThanks anyway @MarkDaoust : ) . I'm closing this issue.\n\n"
      }
    ],
    "satisfaction_conditions": [
      "A method to process only specific pages from a PDF when using the Gemini API",
      "A solution that reduces token consumption when working with large PDFs",
      "A programmatic approach that integrates with their existing Python workflow"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 01:09:35"
    }
  },
  {
    "number": 280,
    "title": "Models are not able to reference file names when producing their outputs",
    "created_at": "2025-02-07T17:13:34Z",
    "closed_at": "2025-02-20T20:31:21Z",
    "labels": [
      "type: feature request",
      "type: question",
      "priority: p3"
    ],
    "url": "https://github.com/googleapis/python-genai/issues/280",
    "body": "I'd like the model to be able to reference the file source when answering questions that were preceded with file inputs.\n\nConsider this example:\n\n```python\nimport io, google.genai\n\nGOOGLE_API_KEY = \"--API_KEY--\"\nclient = google.genai.Client(api_key=GOOGLE_API_KEY)\n\ndef upload_file(file_contents, display_name, mime_type=\"text/plain\"):\n    file_contents = io.BytesIO(file_contents.encode(\"utf-8\"))\n    return client.files.upload(path=file_contents, config={\"mime_type\": mime_type, \"display_name\": display_name})\n\nfc_1 = \"\"\"Simplicity is the ultimate sophistication.\n\u2014 Leonardo da Vinci\n\"\"\"\nfc_2 = \"\"\"It always seems impossible until it\u2019s done.\n- Nelson Mandela\n\"\"\"\n\nfiles = [upload_file(fc_1, \"file1.md\"), upload_file(fc_2, \"file2.md\")]\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.0-flash\",\n    contents=[files[0], files[1],\n        \"For every file, output the name of the file and the quote inside.\",\n    ])\nprint(response.candidates[0].content.parts[0].text)\n```\n\nHere is one of the responses I got:\n\n```\nOkay, I understand. Here's how I will respond, given a file name:\n\n**Input:**\n\n*   `[Filename]`\n\n**Output:**\n\n*   `[Filename]: [Author]`\n\n**Examples:**\n\n*   `quote1.txt`\n*   `quote1.txt: Leonardo da Vinci`\n\n*   `quote2.txt`\n*   `quote2.txt: Nelson Mandela`\n```\n\nNotice that the model is not aware of the file names and can't reference them in its answer.\n\nIf I invoke the model from the Google AI studio, I get the result I'd like:\n```\nfile1.md: Simplicity is the ultimate sophistication.\nfile2.md: It always seems impossible until it\u2019s done.\n```\n\nIs this something we can expect to be ironed out in this library, or should I consider switching to google-generativeai lib?\n\nThe ability to reference files is absolutely crucial for our use case.",
    "comments_url": "https://api.github.com/repos/googleapis/python-genai/issues/280/comments",
    "author": "gapeslape",
    "comments": [
      {
        "user": "nurgel",
        "created_at": "2025-02-08T03:42:33Z",
        "body": "you could prepend all the metadata you like in text before the file, that is what they probably do on AI Studio."
      },
      {
        "user": "gapeslape",
        "created_at": "2025-02-08T17:30:18Z",
        "body": "@nurgel that works great. Thanks!"
      },
      {
        "user": "pamorgan",
        "created_at": "2025-02-20T20:31:21Z",
        "body": "Thank you - Please let us know if there are more follow ups needed."
      }
    ],
    "satisfaction_conditions": [
      "A method to make file names accessible to the model when processing file content",
      "A solution that works with their existing code structure using the google.genai library",
      "A straightforward implementation that doesn't require complex changes"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 01:09:42"
    }
  },
  {
    "number": 74,
    "title": "fix: FunctionCallCancellation ids type.",
    "created_at": "2025-01-03T17:44:30Z",
    "closed_at": "2025-01-03T18:13:13Z",
    "labels": [
      "google-contributor"
    ],
    "url": "https://github.com/googleapis/python-genai/pull/74",
    "body": "fix: FunctionCallCancellation ids type.\n\nCo-authored-by: jayesh <jayeshparmar9829@gmail.com>\n",
    "comments_url": "https://api.github.com/repos/googleapis/python-genai/issues/74/comments",
    "author": "copybara-service[bot]",
    "comments": [
      {
        "user": "happy-qiao",
        "created_at": "2025-01-03T18:00:44Z",
        "body": "Fixes #50 \r\n"
      },
      {
        "user": "happy-qiao",
        "created_at": "2025-01-03T18:08:38Z",
        "body": "@jayeshp19 Thanks for reporting and fixing the issue #50 . We haven't supported external PR yet. I've applied your changes in a new pull request and will merge it shortly."
      },
      {
        "user": "jayeshp19",
        "created_at": "2025-01-03T18:17:35Z",
        "body": "Great!! Thanks :) Are you releasing new version any soon? "
      },
      {
        "user": "happy-qiao",
        "created_at": "2025-01-03T18:23:44Z",
        "body": "We will release a new version early next week."
      }
    ],
    "satisfaction_conditions": [
      "Confirmation that the type issue in FunctionCallCancellation ids will be fixed",
      "Information about when the fix will be available in a released version"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 01:09:48"
    }
  }
]