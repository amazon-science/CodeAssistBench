[
  {
    "number": 456,
    "title": "[Bug] 一直提示r: 您的配置文件太旧了，缺少了：",
    "created_at": "2025-03-20T13:44:13Z",
    "closed_at": "2025-03-21T05:43:36Z",
    "commit_id": "5ebc62a084686f9e33ada3cb26cf0e10b8988a9d",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/xinnan-tech/xiaozhi-esp32-server/issues/456",
    "body": ".ACGNTTS.output_file\n2025-03-20 21:41:32 xiaozhi-esp32-server  | - TTS.OpenAITTS.output_file\n2025-03-20 21:41:32 xiaozhi-esp32-server  | - TTS.CustomTTS.output_file\n2025-03-20 21:41:32 xiaozhi-esp32-server  | 建议您：\n2025-03-20 21:41:32 xiaozhi-esp32-server  | 1、备份data/.config.yaml文件\n2025-03-20 21:41:32 xiaozhi-esp32-server  | 2、将根目录的config.yaml文件复制到data下，重命名为.config.yaml\n2025-03-20 21:41:32 xiaozhi-esp32-server  | 3、将密钥逐个复制到新的配置文件中\n2025-03-20 21:41:32 xiaozhi-esp32-server  | \n2025-03-20 21:41:40 xiaozhi-esp32-server  | Traceback (most recent call last):\n2025-03-20 21:41:40 xiaozhi-esp32-server  |   File \"/opt/xiaozhi-esp32-server/app.py\", line 49, in <module>\n2025-03-20 21:41:40 xiaozhi-esp32-server  |     asyncio.run(main())\n2025-03-20 21:41:40 xiaozhi-esp32-server  |   File \"/usr/local/lib/python3.10/asyncio/runners.py\", line 44, in run\n2025-03-20 21:41:40 xiaozhi-esp32-server  |     return loop.run_until_complete(main)\n2025-03-20 21:41:40 xiaozhi-esp32-server  |   File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 649, in run_until_complete\n2025-03-20 21:41:40 xiaozhi-esp32-server  |     return future.result()\n2025-03-20 21:41:40 xiaozhi-esp32-server  |   File \"/opt/xiaozhi-esp32-server/app.py\", line 27, in main\n2025-03-20 21:41:40 xiaozhi-esp32-server  |     check_config_file()\n2025-03-20 21:41:40 xiaozhi-esp32-server  |   File \"/opt/xiaozhi-esp32-server/config/settings.py\", line 84, in check_config_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  |     raise ValueError(error_msg)\n2025-03-20 21:41:40 xiaozhi-esp32-server  | ValueError: 您的配置文件太旧了，缺少了：\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - iot\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.EdgeTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.DoubaoTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.CosyVoiceSiliconflow.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.CozeCnTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.FishSpeech.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.GPT_SOVITS_V2.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.GPT_SOVITS_V3.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.MinimaxTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.AliyunTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.TTS302AI.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.ACGNTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.OpenAITTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | - TTS.CustomTTS.output_file\n2025-03-20 21:41:40 xiaozhi-esp32-server  | 建议您：\n2025-03-20 21:41:40 xiaozhi-esp32-server  | 1、备份data/.config.yaml文件\n2025-03-20 21:41:40 xiaozhi-esp32-server  | 2、将根目录的config.yaml文件复制到data下，重命名为.config.yaml\n2025-03-20 21:41:40 xiaozhi-esp32-server  | 3、将密钥逐个复制到新的配置文件中\n2025-03-20 21:41:40 xiaozhi-esp32-server  | \n2025-03-20 21:41:56 xiaozhi-esp32-server  | Traceback (most recent call last):\n2025-03-20 21:41:56 xiaozhi-esp32-server  |   File \"/opt/xiaozhi-esp32-server/app.py\", line 49, in <module>\n2025-03-20 21:41:56 xiaozhi-esp32-server  |     asyncio.run(main())\n2025-03-20 21:41:56 xiaozhi-esp32-server  |   File \"/usr/local/lib/python3.10/asyncio/runners.py\", line 44, in run\n2025-03-20 21:41:56 xiaozhi-esp32-server  |     return loop.run_until_complete(main)\n2025-03-20 21:41:56 xiaozhi-esp32-server  |   File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 649, in run_until_complete\n2025-03-20 21:41:56 xiaozhi-esp32-server  |     return future.result()\n2025-03-20 21:41:56 xiaozhi-esp32-server  |   File \"/opt/xiaozhi-esp32-server/app.py\", line 27, in main\n2025-03-20 21:41:56 xiaozhi-esp32-server  |     check_config_file()\n2025-03-20 21:41:56 xiaozhi-esp32-server  |   File \"/opt/xiaozhi-esp32-server/config/settings.py\", line 84, in check_config_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  |     raise ValueError(error_msg)\n2025-03-20 21:41:56 xiaozhi-esp32-server  | ValueError: 您的配置文件太旧了，缺少了：\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - iot\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.EdgeTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.DoubaoTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.CosyVoiceSiliconflow.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.CozeCnTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.FishSpeech.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.GPT_SOVITS_V2.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.GPT_SOVITS_V3.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.MinimaxTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.AliyunTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.TTS302AI.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.ACGNTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.OpenAITTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | - TTS.CustomTTS.output_file\n2025-03-20 21:41:56 xiaozhi-esp32-server  | 建议您：\n2025-03-20 21:41:56 xiaozhi-esp32-server  | 1、备份data/.config.yaml文件\n2025-03-20 21:41:56 xiaozhi-esp32-server  | 2、将根目录的config.yaml文件复制到data下，重命名为.config.yaml\n2025-03-20 21:41:56 xiaozhi-esp32-server  | 3、将密钥逐个复制到新的配置文件中\n2025-03-20 21:41:56 xiaozhi-esp32-server  | \n2036-01-01 00:00:00 \nxiaozhi-esp32-server exited with code 1",
    "comments_url": "https://api.github.com/repos/xinnan-tech/xiaozhi-esp32-server/issues/456/comments",
    "author": "81199000",
    "comments": [
      {
        "user": "openrz",
        "created_at": "2025-03-20T13:50:28Z",
        "body": "试一下下面的命令清空当前版本版本，然后再使用docker-compose启动试一下。\n\n```\ndocker stop xiaozhi-esp32-server\ndocker rm xiaozhi-esp32-server\ndocker rmi ghcr.nju.edu.cn/xinnan-tech/xiaozhi-esp32-server:server_latest\n```"
      },
      {
        "user": "81199000",
        "created_at": "2025-03-20T14:20:27Z",
        "body": "牛逼"
      }
    ],
    "satisfaction_conditions": [
      "A solution that resolves the configuration file outdated error",
      "A simple command-line approach to reset the system",
      "Instructions that can be executed without deep technical knowledge"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 00:59:17"
    }
  },
  {
    "number": 337,
    "title": "项目启动报错提示缺少music.music_commands配置",
    "created_at": "2025-03-14T08:37:44Z",
    "closed_at": "2025-03-14T09:24:36Z",
    "commit_id": "b8e9aded6b36b9807bcbe7ba1facca9140e58509",
    "labels": [],
    "url": "https://github.com/xinnan-tech/xiaozhi-esp32-server/issues/337",
    "body": "xiaozhi-esp32-server    | Traceback (most recent call last):\nxiaozhi-esp32-server    |   File \"/opt/xiaozhi-esp32-server/app.py\", line 26, in <module>\nxiaozhi-esp32-server    |     asyncio.run(main())\nxiaozhi-esp32-server    |   File \"/usr/local/lib/python3.10/asyncio/runners.py\", line 44, in run\nxiaozhi-esp32-server    |     return loop.run_until_complete(main)\nxiaozhi-esp32-server    |   File \"/usr/local/lib/python3.10/asyncio/base_events.py\", line 649, in run_until_complete\nxiaozhi-esp32-server    |     return future.result()\nxiaozhi-esp32-server    |   File \"/opt/xiaozhi-esp32-server/app.py\", line 10, in main\nxiaozhi-esp32-server    |     check_config_file()\nxiaozhi-esp32-server    |   File \"/opt/xiaozhi-esp32-server/config/settings.py\", line 84, in check_config_file\nxiaozhi-esp32-server    |     raise ValueError(error_msg)\nxiaozhi-esp32-server    | ValueError: 您的配置文件太旧了，缺少了：\nxiaozhi-esp32-server    | - music.music_commands\nxiaozhi-esp32-server    | 建议您：\nxiaozhi-esp32-server    | 1、备份data/.config.yaml文件\nxiaozhi-esp32-server    | 2、将根目录的config.yaml文件复制到data下，重命名为.config.yaml\nxiaozhi-esp32-server    | 3、将密钥逐个复制到新的配置文件中",
    "comments_url": "https://api.github.com/repos/xinnan-tech/xiaozhi-esp32-server/issues/337/comments",
    "author": "cikichen",
    "comments": [
      {
        "user": "journey-ad",
        "created_at": "2025-03-14T08:41:37Z",
        "body": "> xiaozhi-esp32-server | ValueError: 您的配置文件太旧了，缺少了：\n> xiaozhi-esp32-server | - music.music_commands\n> xiaozhi-esp32-server | 建议您：\n> xiaozhi-esp32-server | 1、备份data/.config.yaml文件\n> xiaozhi-esp32-server | 2、将根目录的config.yaml文件复制到data下，重命名为.config.yaml\n> xiaozhi-esp32-server | 3、将密钥逐个复制到新的配置文件中\n\n配置项有变动，按提示改下就行了。配置太多不想来回改也可以参照最新文件，手动增加`music.music_commands`这条配置"
      },
      {
        "user": "cikichen",
        "created_at": "2025-03-14T08:42:52Z",
        "body": "> > xiaozhi-esp32-server | ValueError: 您的配置文件太旧了，缺少了：\n> > xiaozhi-esp32-server | - music.music_commands\n> > xiaozhi-esp32-server | 建议您：\n> > xiaozhi-esp32-server | 1、备份data/.config.yaml文件\n> > xiaozhi-esp32-server | 2、将根目录的config.yaml文件复制到data下，重命名为.config.yaml\n> > xiaozhi-esp32-server | 3、将密钥逐个复制到新的配置文件中\n> \n> 配置项有变动，按提示改下就行了。配置太多不想来回改也可以参照最新文件，手动增加`music.music_commands`这条配置\n\n看了代码最新配置文件，都没有这个选项"
      },
      {
        "user": "cikichen",
        "created_at": "2025-03-14T08:46:16Z",
        "body": "ValueError: 不支持的记忆服务类型: nomem"
      },
      {
        "user": "xinnan-tech",
        "created_at": "2025-03-14T08:57:48Z",
        "body": "你可能用的旧版docker？试试\n```\ndocker stop xiaozhi-esp32-server\ndocker rm xiaozhi-esp32-server\ndocker rmi ghcr.nju.edu.cn/xinnan-tech/xiaozhi-esp32-server:server_latest\n```\n然后下载最新的docker-compose启动docker"
      },
      {
        "user": "cikichen",
        "created_at": "2025-03-14T09:24:36Z",
        "body": "> 你可能用的旧版docker？试试\n> \n> ```\n> docker stop xiaozhi-esp32-server\n> docker rm xiaozhi-esp32-server\n> docker rmi ghcr.nju.edu.cn/xinnan-tech/xiaozhi-esp32-server:server_latest\n> ```\n> \n> 然后下载最新的docker-compose启动docker\n\n我习惯性用的latest，没注意是server_latest"
      }
    ],
    "satisfaction_conditions": [
      "Guidance on using the correct Docker image tag",
      "A solution that addresses version compatibility issues between the user's configuration and the current software requirements"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 00:59:22"
    }
  },
  {
    "number": 260,
    "title": "从Log文件看到运行地址不是内网地址，正常吗",
    "created_at": "2025-03-10T03:01:01Z",
    "closed_at": "2025-03-10T13:40:32Z",
    "commit_id": "c1084923f76b57d2f10c8134c74501ebd4857417",
    "labels": [],
    "url": "https://github.com/xinnan-tech/xiaozhi-esp32-server/issues/260",
    "body": "Log文件显示的地址是172.18.0.2\n\n25-03-10 10:57:19[core.websocket_server] - INFO - Server is running at ws://172.18.0.2:8000\n25-03-10 10:57:19[core.websocket_server] - INFO - =======上面的地址是websocket协议地址，请勿用浏览器访问=======\n\n这是正常的吗，我docker-compose.yml中设置了本地ip，但是config.yaml中默认那个0.0.0.0没有更改，这样设置是正确的吗？谢谢",
    "comments_url": "https://api.github.com/repos/xinnan-tech/xiaozhi-esp32-server/issues/260/comments",
    "author": "norsizu",
    "comments": [
      {
        "user": "xinnan-tech",
        "created_at": "2025-03-10T08:38:14Z",
        "body": "1、从Log文件看到运行地址不是内网地址，正常吗？\n回答：正常的，我们的教程文档说了，接口地址不能以日志显示的地址为主，要以机器在局域网的地址为主。\n\n\n2、config.yaml中默认那个0.0.0.0要不要更改？\n回答：用docker部署，就不需要改了。如果用conda部署，并且是运行在公网上，从网络安全角度上看，最好要改。"
      },
      {
        "user": "norsizu",
        "created_at": "2025-03-10T09:03:01Z",
        "body": "> 1、从Log文件看到运行地址不是内网地址，正常吗？ 回答：正常的，我们的教程文档说了，接口地址不能以日志显示的地址为主，要以机器在局域网的地址为主。\n> \n> 2、config.yaml中默认那个0.0.0.0要不要更改？ 回答：用docker部署，就不需要改了。如果用conda部署，并且是运行在公网上，从网络安全角度上看，最好要改。\n\n多谢指导~"
      }
    ],
    "satisfaction_conditions": [
      "Confirmation that the Docker container's internal IP address (172.18.0.2) showing in logs is normal behavior",
      "Clarification about whether the default '0.0.0.0' setting in config.yaml needs to be changed when using Docker",
      "Understanding the relationship between the displayed IP in logs and the actual network interface to use"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 00:59:26"
    }
  }
]