[
  {
    "number": 1,
    "title": "Cannot remove plates from Known Plates Dashboard",
    "created_at": "2024-11-18T15:07:37Z",
    "closed_at": "2024-11-18T18:28:00Z",
    "commit_id": "95ee6d78b3c5f4466defc24c9212c6596125261b",
    "labels": [],
    "url": "https://github.com/algertc/ALPR-Database/issues/1",
    "body": "Running on Linux Docker with the latest repo changes.\r\n\r\nTested in both Chrome and Safari.\r\n\r\nClicking on the delete button within the table of known plates doesn't delete the plate.\r\n\r\nConsole Log:\r\n\r\n```Failed to remove from known plates: ReferenceError: removeFromKnownPlates is not defined```",
    "comments_url": "https://api.github.com/repos/algertc/ALPR-Database/issues/1/comments",
    "author": "TinyShark",
    "comments": [
      {
        "user": "algertc",
        "created_at": "2024-11-18T18:28:00Z",
        "body": "Thank you. Fix pushed. \r\n\r\n`docker compose down`, then `docker compose up -d` should fix. If not, `docker pull algertc/alpr-dashboard` and that should pull the latest version."
      },
      {
        "user": "TinyShark",
        "created_at": "2024-11-19T00:11:27Z",
        "body": "pulling the new image got it to work. Known plates are being removed correctly now.\r\n\r\nMany thanks!"
      }
    ],
    "satisfaction_conditions": [
      "A solution that fixes the 'removeFromKnownPlates is not defined' error",
      "Clear instructions on how to apply the fix to their Docker environment",
      "Restoration of the ability to remove plates from the Known Plates Dashboard"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-14 01:01:39"
    },
    "dockerfile": "FROM node:18-bullseye AS builder\n\n# Set working directory\nWORKDIR /app\n\n# Clone the repository and checkout specific commit\nRUN apt-get update && apt-get install -y git && \\\n    git clone https://github.com/algertc/ALPR-Database.git . && \\\n    git checkout 95ee6d78b3c5f4466defc24c9212c6596125261b\n\n# Copy package files and install dependencies\n# Force the install to proceed despite errors\nRUN npm install --legacy-peer-deps\n\n# Build the application\nRUN npm run build\n\n# Create the production image\nFROM node:18-bullseye\n\n# Set working directory\nWORKDIR /app\n\n# Copy built assets and dependencies from builder stage\nCOPY --from=builder /app/.next ./.next\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/package.json ./package.json\nCOPY --from=builder /app/next.config.js ./next.config.js\n\n# Create config and auth directories to persist data\nRUN mkdir -p /app/config /app/auth\nVOLUME [\"/app/config\", \"/app/auth\"]\n\n# Copy specific files needed for runtime\nCOPY --from=builder /app/schema.sql ./schema.sql\nCOPY --from=builder /app/lib ./lib\nCOPY --from=builder /app/middleware.js ./middleware.js\nCOPY --from=builder /app/app ./app\nCOPY --from=builder /app/components ./components\nCOPY --from=builder /app/hooks ./hooks\n\n# Expose the application port\nEXPOSE 3000\n\n# Set environment variables\nENV NODE_ENV=production\n\n# Command to run the application\nCMD [\"npm\", \"start\"]"
  }
]