[
  {
    "number": 22,
    "title": "Does it support the GCC compiler with a custom instruction set?",
    "created_at": "2025-03-15T03:42:19Z",
    "closed_at": "2025-03-25T06:17:28Z",
    "commit_id": "14f74db85eb3694f6617f569a2e0e4530fcb451b",
    "labels": [
      "question"
    ],
    "url": "https://github.com/lynx-family/primjs/issues/22",
    "body": "We are an embedded development team from China. Our devices use self-developed SoCs. Can it support custom instruction sets?",
    "comments_url": "https://api.github.com/repos/lynx-family/primjs/issues/22/comments",
    "author": "chenzd123456",
    "comments": [
      {
        "user": "viekai",
        "created_at": "2025-03-17T07:15:01Z",
        "body": "Since the core code of our template interpreter is in the .S file, which is generated by an internal assembler, it might be difficult to achieve this until we open-source our assembler. However, you can turn off the template interpreter and use the C interpreter version."
      },
      {
        "user": "chenzd123456",
        "created_at": "2025-03-25T06:17:08Z",
        "body": "THX. I will try it."
      }
    ],
    "satisfaction_conditions": [
      "A viable workaround for using the system with a custom instruction set",
      "Clear explanation of the technical limitations preventing direct support",
      "A practical solution that can be implemented by the embedded development team"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 01:00:59"
    }
  },
  {
    "number": 6,
    "title": "How does TOS caching and GC roots interact?",
    "created_at": "2025-03-05T15:27:48Z",
    "closed_at": "2025-03-06T03:52:35Z",
    "commit_id": "b1fd84b0ef125cd82595d9bcb4b0589f9b8f4e0a",
    "labels": [],
    "url": "https://github.com/lynx-family/primjs/issues/6",
    "body": "Hi PrimJS developers. First of all, great work on the runtime!\n\nGC docs say that one of the roots is the `Interpreter Execution Stack`. However, the interpreter docs also say primjs does TOS caching. Once values are TOS cached into register x0/x1, don't they become invisible to the GC? In that case, how are the objects kept alive?\n\nThis is just a curious question, as I work on CPython, and we're planning to do TOS caching too.\n",
    "comments_url": "https://api.github.com/repos/lynx-family/primjs/issues/6/comments",
    "author": "Fidget-Spinner",
    "comments": [
      {
        "user": "sunzhipengbd",
        "created_at": "2025-03-06T03:48:18Z",
        "body": "Before the interpreter jumps to runtime, x0 and x1 are pushed onto the stack.\nThen the gc mark stage will scan the stack"
      },
      {
        "user": "Fidget-Spinner",
        "created_at": "2025-03-06T03:52:25Z",
        "body": "Makes sense. Thanks!"
      }
    ],
    "satisfaction_conditions": [
      "An explanation of how TOS cached values remain visible to the garbage collector",
      "A clear description of the mechanism that prevents memory leaks when using TOS caching",
      "Information that is transferable to other runtime implementations"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-14 01:01:04"
    }
  }
]